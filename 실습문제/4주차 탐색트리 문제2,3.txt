#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
#include <string.h>

struct node {
	int key;
	int height;
	struct node* parent;
	struct node* lChild;
	struct node* rChild;
};
struct node* root;
int isExternal(struct node* w) {
	if ((w->lChild == NULL) && (w->rChild == NULL))
		return 1;
	else
		return 0;
}
int isInternal(struct node* w) {
	if ((w->lChild != NULL) && (w->rChild != NULL))
		return 1;
	else
		return 0;
}
struct node* sibling(struct node* w) {
	if (w->parent == NULL)		// root has no sibling
		return;
	if (w->parent->lChild == w)
		return w->parent->rChild;
	else 
		return w->parent->lChild;
}
struct node* inOrderSucc(struct node* w) {
	w = w->rChild;
	if (isExternal(w))
		return;
	while (isInternal(w->lChild))
		w = w->lChild;

	return w;
}
void expandExternal(struct node* w) {
	struct node* leftnode = (struct node*)malloc(sizeof(struct node));
	struct node* rightnode = (struct node*)malloc(sizeof(struct node));

	leftnode->lChild = NULL;
	leftnode->rChild = NULL;
	leftnode->height = 0;
	leftnode->parent = w;

	rightnode->lChild = NULL;
	rightnode->rChild = NULL;
	rightnode->height = 0;
	rightnode->parent = w;

	w->lChild = leftnode;
	w->rChild = rightnode;
	w->height = 1;
	return;
}
struct node* reduceExternal(struct node* z) {
	struct node* p, * zs, * g;
	p = z->parent;
	zs = sibling(z);

	if (p->parent == NULL) {		// renew root
		root = zs;
		zs->parent = NULL;
	}
	else {
		g = p->parent;
		zs->parent = g;
		if (p == g->lChild)
			g->lChild = zs;
		else if (p == g->rChild)
			g->rChild = zs;
	}
	free(z);		// deallocate node z,p
	free(p);

	return zs;
}
struct node* treeSearch(struct node* w, int k) {
	if (isExternal(w))
		return w;
	if (w->key == k)
		return w;
	else if (w->key > k)
		return treeSearch(w->lChild, k);
	else 
		return treeSearch(w->rChild, k);
}
int updateHeight(struct node* w) {
	int height;
	if (w->lChild->height > w->rChild->height)		// 더 큰 자식의 높이를 이용
		height = w->lChild->height + 1;
	else 
		height = w->rChild->height + 1;

	if (height != w->height) {
		w->height = height;
		return 1;
	}
	else
		return 0;
}
int isBalanced(struct node* w) {
	if ((-1 <= (w->lChild->height - w->rChild->height)) && ((w->lChild->height - w->rChild->height) <= 1))
		return 1;
	else 
		return 0;
}
struct node* restructure(struct node* x, struct node* y, struct node* z) {
	struct node* a, * b, * c;
	struct node* T0, * T1, * T2, * T3;

	if ((z->key < y->key) && (y->key < x->key)) {		// z < y < x
		a = z;
		b = y;
		c = x;

		T0 = a->lChild;
		T1 = b->lChild;
		T2 = c->lChild;
		T3 = c->rChild;
	}
	else if ((x->key < y->key) && (y->key < z->key)) {		// x < y < z
		a = x;
		b = y;
		c = z;

		T0 = a->lChild;
		T1 = a->rChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}
	else if ((z->key < x->key) && (x->key < y->key)) {		// z < x < y
		a = z;
		b = x;
		c = y;

		T0 = a->lChild;
		T1 = b->lChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}
	else {		// y < x < z
		a = y;
		b = x;
		c = z;
		
		T0 = a->lChild;
		T1 = b->lChild;
		T2 = b->rChild;
		T3 = c->rChild;
	}
	
	// replace the subtree rooted at z with a new subtree rooted at b (z를 b로 대체)
	if (z->parent == NULL) {
		root = b;
		b->parent = NULL;
	}
	else if (z->parent->lChild == z) {
		z->parent->lChild = b;
		b->parent = z->parent;
	}
	else if (z->parent->rChild == z) {
		z->parent->rChild = b;
		b->parent = z->parent;
	}

	// Let T0 and T1 be the left and the right subtree of a, resp.
	a->lChild = T0;
	T0->parent = a;
	a->rChild = T1;
	T1->parent = a;
	updateHeight(a);

	// Let T2 and T3 be the left and the right subtree of c, resp.
	c->lChild = T2;
	T2->parent = c;
	c->rChild = T3;
	T3->parent = c;
	updateHeight(c);

	// Let a and c be the left and the right child of b, resp.
	b->lChild = a;
	a->parent = b;
	b->rChild = c;
	c->parent = b;
	updateHeight(b);

	return b;
}
void searchAndFixAfterInsertion(struct node* w) {
	struct node* x, * y, * z;

	// Update heights and search for imbalance
	w->lChild->height = 0;
	w->rChild->height = 0;
	w->height = 1;
	if (w->parent == NULL)
		return;
	z = w->parent;
	while (updateHeight(z) && isBalanced(z)) {
		if (z->parent == NULL)
			return;
		z = z->parent;
	}
	if (isBalanced(z))
		return;

	// Fix imbalance
	if (z->lChild->height > z->rChild->height)
		y = z->lChild;
	else
		y = z->rChild;
	if (y->lChild->height > y->rChild->height)
		x = y->lChild;
	else 
		x = y->rChild;

	restructure(x, y, z);

	return;
}
void insertItem(struct node* w, int k) {
	struct node* p = treeSearch(w, k);		// 삽입 키를 저장한 노드 찾기
	if (isInternal(p))		// 이미 존재하면 반환
		return;
	else {
		p->key = k;
		expandExternal(p);
		searchAndFixAfterInsertion(p);
	}
}
void searchAndFixAfterRemoval(struct node* w) {
	struct node* x, * y, * z, * b;

	if (w == NULL)
		return;
	z = w;	x = NULL;		// 초기화(error 해결)
	// Update heights and search for imbalance
	while (updateHeight(z) && isBalanced(z)) {
		if (z->parent == NULL)
			return;
		z = z->parent;
	}
	if (isBalanced(z))
		return;

	// Fix imbalance
	if (z->lChild->height > z->rChild->height)
		y = z->lChild;
	else 
		y = z->rChild;

	if (y->lChild->height > y->rChild->height) 
		x = y->lChild;
	else if (y->lChild->height < y->rChild->height) 
		x = y->rChild;
	else {
		if (z->lChild == y)
			x = y->lChild;
		else if (z->rChild == y) 
			x = y->rChild;
	}

	b = restructure(x, y, z);
	if (b->parent == NULL)
		return;
	searchAndFixAfterRemoval(b->parent);
}
int removeElement(struct node* w, int k) {
	struct node* p = treeSearch(w, k);
	struct node* z, * zs, * y;
	int e;

	if (isExternal(p))		// 삭제할 키가 없는 경우
		return -1;

	e = p->key;
	z = p->lChild;
	if (!isExternal(z))
		z = p->rChild;
	if (isExternal(z))
		zs = reduceExternal(z);
	else {
		y = inOrderSucc(p);		// 중위순위 후계자 y가 삭제한 노드 위치에 오도록 한다.
		z = y->lChild;
		p->key = y->key;
		zs = reduceExternal(z);
	}

	searchAndFixAfterRemoval(zs->parent);
	return e;
}
void findElement(struct node* root, int k) {
	struct node* w = treeSearch(root, k);
	if (isInternal(w))
		printf("%d\n", k);
	else
		printf("X\n");
}
void printTree(struct node* w) {
	if (isExternal(w))
		return;
	else {		// 전위순회로 인쇄
		printf(" %d", w->key);
		printTree(w->lChild);
		printTree(w->rChild);
	}

}
void freeTree(struct node* w) {
	if (isExternal(w))
		return;
	else {		// 후위순회로 해제
		freeTree(w->lChild);
		freeTree(w->rChild);
		free(w);
	}
}

int main(void) {
	char type;
	int key, value;
	root = (struct node*)malloc(sizeof(struct node));		// 기존 w 대신 전역변수 root 이용
	root->parent = NULL;
	root->lChild = NULL;
	root->rChild = NULL;
	while (1) {
		scanf("%c", &type);
		if (type == 'i') {
			scanf("%d", &key);
			insertItem(root, key);
			getchar();
		}
		else if (type == 'd') {
			scanf("%d", &key);
			value = removeElement(root, key);
			if (value == key)
				printf("%d\n", value);
			else
				printf("X\n");
			getchar();
		}
		else if (type == 's') {
			scanf("%d", &key);
			if (treeSearch(root, key)->key != key)
				printf("X\n");
			else
				printf("%d\n", treeSearch(root, key)->key);
			getchar();
		}
		else if (type == 'p') {
			printTree(root);
			printf("\n");
		}
		else if (type == 'q')
			break;
	}

	freeTree(root);

	return 0;
}
